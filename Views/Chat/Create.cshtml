@model XChat.Models.Chat
@using Microsoft.Data.SqlClient;
@using System.Text.Json;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;
@using Microsoft.AspNetCore.Identity
@using XChat.Areas.Identity.Data
@using  Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Mvc
@using Microsoft.AspNetCore.Mvc.Rendering

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Chat";
    
}

@{

    var url = ViewContext.HttpContext.Request.QueryString;
    string[] urlList = url.ToString().Split("=");
    string Email = "";
    string myEmail = "";
    if(urlList.Length>1){
        Email = urlList[1];
        myEmail = UserManager.GetUserName(User);
    }else{

    }

    string connectionString = "Server=DESKTOP-OFRUC79;Database=XChat;Trusted_Connection=True;";  // typically, you get this from a config file

    string sqlChats = "select * from dbo.Chats where SenderID='" + Email + "' and RecipientID='" + myEmail + "' or RecipientID='" + Email + "' and SenderID='" + myEmail + "' ";
    SqlConnection conn = new SqlConnection(connectionString);

    SqlCommand sqlCommand = new SqlCommand(sqlChats, conn);
    JArray chats = new JArray();


    {
        // open connection, execute query, close connection
        conn.Open();
        SqlDataReader reader = sqlCommand.ExecuteReader();

        while (reader.Read())
        {
            JObject obj = new JObject();
            string message = reader["Message"].ToString();
            string read = reader["Read"].ToString();
            string date = reader["SendDate"].ToString();
            string sender = reader["SenderID"].ToString();
            string recipient = reader["RecipientID"].ToString();


            obj.Add("Message", message);
            obj.Add("Read", read);
            obj.Add("SendDate", date);
            obj.Add("SenderID", sender);
            obj.Add("RecipientID", recipient);

            chats.Add(obj);

        }
        Console.WriteLine(chats);
    }
}



<style>
    #chat1 .form-outline .form-control ~ .form-notch div {
        pointer-events: none;
        border: 1px solid;
        border-color: #eee;
        box-sizing: border-box;
        background: transparent;
    }

    #chat1 .form-outline .form-control ~ .form-notch .form-notch-leading {
        left: 0;
        top: 0;
        height: 100%;
        border-right: none;
        border-radius: .65rem 0 0 .65rem;
    }

    #chat1 .form-outline .form-control ~ .form-notch .form-notch-middle {
        flex: 0 0 auto;
        max-width: calc(100% - 1rem);
        height: 100%;
        border-right: none;
        border-left: none;
    }

    #chat1 .form-outline .form-control ~ .form-notch .form-notch-trailing {
        flex-grow: 1;
        height: 100%;
        border-left: none;
        border-radius: 0 .65rem .65rem 0;
    }

    #chat1 .form-outline .form-control:focus ~ .form-notch .form-notch-leading {
        border-top: 0.125rem solid #39c0ed;
        border-bottom: 0.125rem solid #39c0ed;
        border-left: 0.125rem solid #39c0ed;
    }

    #chat1 .form-outline .form-control:focus ~ .form-notch .form-notch-leading,
    #chat1 .form-outline .form-control.active ~ .form-notch .form-notch-leading {
        border-right: none;
        transition: all 0.2s linear;
    }

    #chat1 .form-outline .form-control:focus ~ .form-notch .form-notch-middle {
        border-bottom: 0.125rem solid;
        border-color: #39c0ed;
    }

    #chat1 .form-outline .form-control:focus ~ .form-notch .form-notch-middle,
    #chat1 .form-outline .form-control.active ~ .form-notch .form-notch-middle {
        border-top: none;
        border-right: none;
        border-left: none;
        transition: all 0.2s linear;
    }

    #chat1 .form-outline .form-control:focus ~ .form-notch .form-notch-trailing {
        border-top: 0.125rem solid #39c0ed;
        border-bottom: 0.125rem solid #39c0ed;
        border-right: 0.125rem solid #39c0ed;
    }

    #chat1 .form-outline .form-control:focus ~ .form-notch .form-notch-trailing,
    #chat1 .form-outline .form-control.active ~ .form-notch .form-notch-trailing {
        border-left: none;
        transition: all 0.2s linear;
    }

    #chat1 .form-outline .form-control:focus ~ .form-label {
        color: #39c0ed;
    }

    #chat1 .form-outline .form-control ~ .form-label {
        color: #bfbfbf;
    }
</style>

<section style="background-color: #eee;">
    <div class="container py-5">

        <div class="row d-flex justify-content-center">
            <div class="col-md-8 col-lg-6 col-xl-4">

                <div class="card" id="chat1" style="border-radius: 15px;">
                    <div class="card-header d-flex justify-content-between align-items-center p-3 bg-info text-white border-bottom-0"
                         style="border-top-left-radius: 15px; border-top-right-radius: 15px;">
                        <i class="fas fa-angle-left"></i>
                        <p id="chatname" class="mb-0 fw-bold">Live chat</p>
                        <i class="fas fa-times"></i>
                    </div>
                    <div class="card-body">

                        @foreach(var obj in chats){
                            var sender = (string)obj["SenderID"];

                            if (sender==UserManager.GetUserName(User)){
                                <div class="d-flex flex-row justify-content-start mb-4">
                            <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava1-bg.webp"
                                 alt="avatar 1" style="width: 45px; height: 100%;">
                            <div class="p-3 ms-3" style="border-radius: 15px; background-color: rgba(57, 192, 237,.2);">
                                <p class="small mb-0">
                                    @obj["Message"]
                                </p>
                            </div>
                        </div>
                            }else{
                                <div class="d-flex flex-row justify-content-end mb-4">
              <div class="p-3 me-3 border" style="border-radius: 15px; background-color: #fbfbfb;">
                <p class="small mb-0">@obj["Message"]</p>
              </div>
              <img src="https://mdbcdn.b-cdn.net/img/Photos/new-templates/bootstrap-chat/ava2-bg.webp"
                alt="avatar 1" style="width: 45px; height: 100%;">
            </div>
                            }
                        
                        }


             
                        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
           
              <input hidden  id="senderID" asp-for="SenderID" class="form-control" />
              
           
              <input hidden  id="recipientID" asp-for="RecipientID" class="form-control" />

                            <div class="form-outline">
                                <textarea asp-for="Message" class="form-control" id="textAreaExample" rows="4"></textarea>
                            </div>
          <br/>
            <div class="form-group">
                              <button type="submit" class="btn btn-info btn-rounded float-end"><span style="color:white">Send</span></button>

            </div>
        </form>
                        
                        
                        

                    </div>
                </div>

            </div>
        </div>

    </div>
</section>

<script>
$(document).ready(function(){

var email = localStorage.getItem("email")
var myemail = localStorage.getItem("myemail")
var name = localStorage.getItem("fname")+" "+localStorage.getItem("lname")
document.getElementById("senderID").value=myemail;
document.getElementById("recipientID").value=email;
document.getElementById("chatname").innerHTML=name;
        document.getElementById("Email").value = email;
   




        });
</script>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
